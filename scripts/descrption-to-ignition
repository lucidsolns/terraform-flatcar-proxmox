#!/bin/bash
#
# A script to transition a data URL from a VM image into a file that is
# deployed as part of a VM configuration.
#
# This strategy is really good, right up to the point that the size of the
# description field is too large. This strategy works for small VM's
# with a minimal ignition configuration.
#
# The script 'cloudinit-to-ignition' overcomes this limitation with a hack
# that the cloudinit configuration is used to transport the ignition
# configuration
#
# see:
# - /usr/share/pve-docs/examples/guest-example-hookscript.pl
#
set -eu

function configure()
{
        local VM_ID=$1

        # Get the VM Proxmox config
        local VM_CONFIG="$(qm config ${VM_ID})"

        # Get the ignition configuration from the description field of the VM
        local DATA_URL_BASE64=$(printf "%s" "${VM_CONFIG}" | sed -ne 's/^description: data\(:\|%3A\)application\/vnd.coreos.ignition+json[^,]*;base64[^,]*,\(.*\)/\2/gp')
        if [ -n "${DATA_URL_BASE64}" ] ; then
                # Write ignition JSON configuration
                mkdir -p /etc/pve/local/ignition
                printf "%s" "${DATA_URL_BASE64}"| base64 -d > "/etc/pve/local/ignition/${VM_ID}.ign"


                # Check the fw_cfg argument is set (and points to the ignition configuration written above)
                local FW_CFG=$(printf "%s" "${VM_CONFIG}" | sed -ne 's/^args: .*\(-fw_cfg name=opt\/org.flatcar-linux\/config,file=[^\\ ]*\)/\1/gp')
                if [ -n "$FW_CFG" ] ; then
                        return # fw_cfg set correctly
                else
                        echo "Error: The VM configuration must contains additional Qemu arguments of -fw_cfg name=opt/org.flatcar-linux/config,file=/etc/pve/local/ignition/${VM_ID}.ign"
                        exit 5
                fi

                exit 0
        else
                echo "Data URL in the VM configuration descrption field not present"
                exit 0
        fi
}



PHASE=$2
if [ "${PHASE}" = 'pre-start' ]; then
        configure $1
elif [ "${PHASE}" = 'post-start' ]; then
        exit 0
elif [ "${PHASE}" = 'pre-stop' ]; then
        exit 0
elif [ "${PHASE}" = 'post-stop' ]; then
        exit 0
else
        echo "Invalid hook script phase ${PHASE}"
        exit 1
fi
